package com.tracy.slark.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SLARK_LOG".
 */
public class SlarkLogDao extends AbstractDao<SlarkLog, Long> {

    public static final String TABLENAME = "SLARK_LOG";

    /**
     * Properties of entity SlarkLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
    }


    public SlarkLogDao(DaoConfig config) {
        super(config);
    }

    public SlarkLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"SLARK_LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TEXT\" TEXT);"); // 1: text
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SLARK_LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SlarkLog entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());

        String text = entity.getText();
        if (text != null) {
            stmt.bindString(2, text);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SlarkLog entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());

        String text = entity.getText();
        if (text != null) {
            stmt.bindString(2, text);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    @Override
    public SlarkLog readEntity(Cursor cursor, int offset) {
        SlarkLog entity = new SlarkLog( //
                cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // text
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, SlarkLog entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
    }

    @Override
    protected final Long updateKeyAfterInsert(SlarkLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(SlarkLog entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SlarkLog entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
